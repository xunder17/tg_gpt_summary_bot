import g4f
import logging
from sklearn.feature_extraction.text import TfidfVectorizer

logger = logging.getLogger(__name__)

CHARS_PER_MIN = 1000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è

def calculate_reading_time(text: str) -> int:
    """
    –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
    """
    chars_count = len(text)
    mins = chars_count / CHARS_PER_MIN
    return int(mins * 60)

async def generate_summary(posts, user_themes=None, retries=3):
    """
    –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ GPT-–æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
    posts = [{"channel": "...", "text": "...", "link": "..."}...]
    user_themes = —Å–ø–∏—Å–æ–∫ —Ç–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    retries = –∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ GPT.
    """

    if not posts:
        return "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."

    # –£—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤
    truncated_posts = []
    for p in posts:
        text_ = p["text"]
        if len(text_) > 500:
            text_ = text_[:500] + "..."
        truncated_posts.append({
            "channel": p["channel"],
            "text": text_,
            "link": p["link"]
        })

    # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å—Ö–æ–∂–µ—Å—Ç–∏
    texts = [p["text"] for p in truncated_posts]
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(texts)
    sim_matrix = (X * X.T).toarray()  # –ö–æ—Å–∏–Ω—É—Å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞

    threshold = 0.3  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Ç–µ—Ä—ã
    n = len(truncated_posts)
    visited = [False] * n
    clusters = []

    def bfs(start_idx):
        queue = [start_idx]
        cluster = []
        visited[start_idx] = True
        while queue:
            idx = queue.pop(0)
            cluster.append(idx)
            for j in range(n):
                if not visited[j] and sim_matrix[idx, j] >= threshold:
                    visited[j] = True
                    queue.append(j)
        return cluster

    for i in range(n):
        if not visited[i]:
            clusters.append(bfs(i))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
    prompt_parts = [
        "–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å–º—ã—Å–ª–æ–≤–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏.",
        "–°—Ñ–æ—Ä–º–∏—Ä—É–π –∫—Ä–∞—Ç–∫—É—é –æ–±—â—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã.",
        "–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ."
    ]

    if user_themes:
        prompt_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã: {', '.join(user_themes)}.")

    for idx, cluster_indices in enumerate(clusters[:10], start=1):
        prompt_parts.append(f"\nüß© –ö–ª–∞—Å—Ç–µ—Ä {idx}:")
        for i in cluster_indices:
            post = truncated_posts[i]
            prompt_parts.append(
                f"- <b>{post['channel']}</b>: {post['text']} (—Å—Å—ã–ª–∫–∞: {post['link']})"
            )

    prompt_parts.append("\n–û—Ñ–æ—Ä–º–∏ –≤—ã–≤–æ–¥ –∫—Ä–∞—Å–∏–≤–æ, –ø–æ —Ç–µ–º–∞–º, —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å–≤–æ–¥–∫–∞–º–∏.")

    full_prompt = "\n".join(prompt_parts)

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö GPT
    for _ in range(retries):
        try:
            print(f"gpt {_}")
            response = await g4f.ChatCompletion.create_async(
                model='gpt-4',
                messages=[
                    {"role": "system", "content": full_prompt+"\n –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ï –î–õ–ò–ù–ù–ï–ï 2096 —Å–∏–º–≤–æ–ª–æ–≤!!! –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –ø–æ–¥ —Ç–µ–∫—Å—Ç, —Ä–∞—Å–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã —Ç–µ–∫—Å—Ç–∞"},
                    {"role": "user", "content": full_prompt+"\n –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ï –î–õ–ò–ù–ù–ï–ï 2096 —Å–∏–º–≤–æ–ª–æ–≤!!! –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –ø–æ–¥ —Ç–µ–∫—Å—Ç, —Ä–∞—Å–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã —Ç–µ–∫—Å—Ç–∞"}
                ],
            )
            if response and "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É" not in response:
                print(response)
                return response[:4000]
        except Exception as e:
            logging.error(f"GPT error: {e}")
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
