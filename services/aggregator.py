import logging
import asyncio
from datetime import datetime, timedelta, time
from pyrogram import Client

from config import api_id, api_hash
from data.storage import user_data
from services.gpt_service import gpt

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pyrogram-–∫–ª–∏–µ–Ω—Ç
app = Client("my_bot", api_id=api_id, api_hash=api_hash)


async def start_pyrogram():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Pyrogram, –µ—Å–ª–∏ –Ω–µ—Ç - —Å—Ç–∞—Ä—Ç—É–µ–º –µ–≥–æ.
    """
    if not app.is_connected:
        await app.start()


async def get_messages_from_channel(channel_id: int, days: int):
    """
    –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ `days` –¥–Ω–µ–π.
    """
    cutoff_date = datetime.now() - timedelta(days=days)
    messages = []
    async for message in app.get_chat_history(channel_id):
        if message.date >= cutoff_date:
            messages.append(message)
        else:
            break
    return messages


async def restart_scheduler_for_user(user_id: int):
    """
    –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è,
    –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ–Ω—è–ª –≤—Ä–µ–º—è.
    """
    pass


async def send_daily_summary(user_id: int, bot):
    """
    –®–ª—ë—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id, –ø—Ä–æ—Ö–æ–¥—è—Å—å –ø–æ –µ–≥–æ –∫–∞–Ω–∞–ª–∞–º.
    """
    if user_id not in user_data or not user_data[user_id]['channels']:
        return

    try:
        summary = "üì∞ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π*\n\n"

        for channel in user_data[user_id]['channels'][:3]:
            try:
                messages = await get_messages_from_channel(channel['id'], 2)
                if messages:
                    messages_text = "\n".join([m.text or "" for m in messages if hasattr(m, 'text') and m.text])
                    if messages_text:
                        gpt_summary = await gpt.get_best_answer(messages_text[:4000])
                        summary += f"*{channel['title']}* (@{channel['username']})\n"
                        summary += f"{gpt_summary or '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É'}\n\n"
                    else:
                        summary += f"*{channel['title']}* (@{channel['username']})\n"
                        summary += "–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
                else:
                    summary += f"*{channel['title']}* (@{channel['username']})\n"
                    summary += "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            except Exception as e:
                logging.error(f"Error processing channel {channel['title']}: {e}")
                summary += f"*{channel['title']}* (@{channel['username']})\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞\n\n"

        await bot.send_message(user_id, summary)

    except Exception as e:
        logging.error(f"Error sending daily summary to user {user_id}: {e}")


async def scheduler(bot):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ —Å–≤–µ—Ä—è–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑ user_data.
    –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å time(HH, MM), –æ—Ç—Å—ã–ª–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É.
    """
    while True:
        now = datetime.now()
        for user_id, data in user_data.items():
            if not data['settings'].get('daily_summary', True):
                continue

            summary_time = data['settings'].get('summary_time', time(9, 0))
            if now.hour == summary_time.hour and now.minute == summary_time.minute:
                await send_daily_summary(user_id, bot)

        await asyncio.sleep(60)
