# bot/handlers.py

import logging
import asyncio
from datetime import datetime, timedelta, time
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from bot.states import UserStates, PaymentStates
from bot.keyboards import get_inline_main_keyboard, get_inline_keyboard
from data.storage import user_data
from services.aggregator import (
    app,
    get_messages_from_channel,
    restart_scheduler_for_user
)
from services.gpt_service import gpt

level_names = {
    0: "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
    1: "1–π —É—Ä–æ–≤–µ–Ω—å",
    2: "2–π —É—Ä–æ–≤–µ–Ω—å"
}
logger = logging.getLogger(__name__)

# =========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–ù–ï –ú–ï–ù–Ø–õ–ò) ===========
# (–í —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –ª—É—á—à–µ –∏—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ config.py)
API_TOKEN = '7900077305:AAGUvBf1cs76p9F1CmXrFq4yRl-1LTQQtGk'


# –ë–æ—Ç, Dispatcher –∏ —Ç.–¥. –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤ main.py,
# –Ω–æ –∑–¥–µ—Å—å –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å—ë, –∫–∞–∫ —É –≤–∞—Å –≤ –ø—Ä–∏–º–µ—Ä–µ, —á—Ç–æ–± –±—ã–ª–æ "—Ç–æ—á—å-–≤-—Ç–æ—á—å".


#
# –ö–ª–∞—Å—Å GPTAnswer –≤—ã–Ω–µ—Å–µ–Ω –≤ services/gpt_service.py
# –¢–∞–º –∂–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç gpt = GPTAnswer()
#


#
# ============================
#  –•–µ–Ω–¥–ª–µ—Ä—ã
# ============================
#
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM

def initialize_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            'level': 0,
            'channels': [],
            'email': '',
            'tags': [],
            'settings': {
                'daily_summary': True,
                'notifications': True,
                'summary_time': time(9, 0)
            }
        }


def parse_time_input(time_str: str):
    if ':' in time_str:
        hours, minutes = map(int, time_str.split(':'))
    else:
        hours = int(time_str)
        minutes = 0

    if not (0 <= hours < 24 and 0 <= minutes < 60):
        raise ValueError

    return time(hours, minutes)


def register_handlers(dp):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payment
    @dp.message(Command('payment'))
    async def cmd_payment(message: types.Message):
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 1"), types.KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 2")],
                [types.KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 3")]
            ],
            resize_keyboard=True
        )

        await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", reply_markup=keyboard)
        await PaymentStates.CONFIRM_SUBSCRIPTION.set()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏
    @dp.message(PaymentStates.CONFIRM_SUBSCRIPTION)
    async def process_subscription_level(message: types.Message, state: FSMContext):
        if message.text not in ["–£—Ä–æ–≤–µ–Ω—å 1", "–£—Ä–æ–≤–µ–Ω—å 2"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return

        await state.update_data(subscription_level=message.text)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–î–∞"))
        keyboard.add(types.KeyboardButton("–ù–µ—Ç"))

        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=keyboard)
        await PaymentStates.ENTER_EMAIL.set()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    @dp.message(PaymentStates.ENTER_EMAIL)
    async def process_confirmation(message: types.Message, state: FSMContext):
        if message.text.lower() == '–Ω–µ—Ç':
            await message.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_inline_main_keyboard()())
            await state.clear()
            return
        elif message.text.lower() != '–¥–∞':
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
            return

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:")
        await PaymentStates.PAYMENT_LINK_SENT.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PAYMENT_LINK_SENT

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã
    @dp.message(PaymentStates.PAYMENT_LINK_SENT)
    async def process_email(message: types.Message, state: FSMContext):
        email = message.text
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email

        data = await state.get_data()
        subscription_level = data.get('subscription_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å')

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_link = "https://example.com/payment"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", url=payment_link))
        keyboard.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ", callback_data="close_payment"))

        await message.answer(
            f"–ù–∞ –ø–æ—á—Ç—É {email} –ø—Ä–∏—à–ª–∞ —Å—Å—ã–ª–∫–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É {subscription_level}.\n"
            f"–°—Å—ã–ª–∫–∞: {payment_link}",
            reply_markup=keyboard
        )

        await state.clear()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"
    @dp.callback_query(lambda c: c.data == 'close_payment')
    async def process_close_payment(callback_query: types.CallbackQuery):
        await callback_query.message.delete()
        await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫—Ä—ã—Ç—ã.")

    @dp.message(Command("start"))
    async def cmd_start(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if user_id not in user_data:
            user_data[user_id] = {
                'level': 0,
                'channels': [],
                'email': '',
                'tags': [],
                'settings': {
                    'daily_summary': True,
                    'notifications': True,
                    'summary_time': time(9, 0)
                }
            }
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç!\n–Ø ‚Äì –±–æ—Ç summary_bot.\n–Ø –¥–µ–ª–∞—é —Å–∞–º–º–∞—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–º–æ–≥–∞—é —Ç–µ–±–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è.",
                reply_markup=get_inline_keyboard(
                    ("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", "how_it_works")
                )
            )
            await state.set_state(UserStates.waiting_for_first_action)
        else:
            await message.answer(
                f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã!\n–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {level_names[user_data[user_id]['level']]}",
                reply_markup=get_inline_main_keyboard())

        @dp.callback_query(F.data == "how_it_works")
        async def how_it_works(callback: types.CallbackQuery, state: FSMContext):
            await callback.message.edit_text(
                "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
                "1. –¢—ã —Å–∫–∏–¥—ã–≤–∞–µ—à—å –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –∫–∞–Ω–∞–ª—ã.\n"
                "2. –Ø –¥–µ–ª–∞—é —Å–∞–º–º–∞—Ä–∏ - –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —ç—Ç–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "3. –†–∞–∑ –≤ —Å—É—Ç–∫–∏ —è –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ —ç—Ç–æ —Å–∞–º–º–∞—Ä–∏.",
                reply_markup=get_inline_keyboard(
                    ("–í —á–µ–º –ø–æ–ª—å–∑–∞?", "benefit")
                )
            )

        @dp.callback_query(F.data == "benefit")
        async def benefit(callback: types.CallbackQuery, state: FSMContext):
            await callback.message.edit_text(
                "–í —á–µ–º –ø–æ–ª—å–∑–∞?\n"
                "1. –¢—ã –±—É–¥–µ—à—å —É–≤–µ—Ä–µ–Ω –≤ —Ç–æ–º, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—à—å.\n"
                "2. –¢—ã –Ω–µ –±—É–¥–µ—à—å —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.",
                reply_markup=get_inline_keyboard(
                    ("–ö–∞–∫ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç?", "how_it_looks")
                )
            )

        @dp.callback_query(F.data == "how_it_looks")
        async def how_it_looks(callback: types.CallbackQuery, state: FSMContext):
            await callback.message.edit_text(
                "–õ—É—á—à–µ –æ–¥–∏–Ω —Ä–∞–∑ —É–≤–∏–¥–µ—Ç—å, —á–µ–º —Å—Ç–æ —Ä–∞–∑... —Ö–º... –ø—Ä–æ—á–∏—Ç–∞—Ç—å.\n"
                "–î–∞–≤–∞–π –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ @vcnews (–ø—Ä–∏–º–µ—Ä –∫–∞–Ω–∞–ª–∞).",
                reply_markup=get_inline_keyboard(
                    ("–î–∞–≤–∞–π", "show_example")
                )
            )

        @dp.callback_query(F.data == "show_example")
        async def show_example(callback: types.CallbackQuery, state: FSMContext):
            chat = await app.get_chat("@vcnews")
            idc = chat.id
            messages = await get_messages_from_channel(idc, 2)
            messages_text = ''
            for i, msg in enumerate(messages):
                messages_text += f"–ü–æ—Å—Ç {i}: "+msg['text']+"\n"
            gpt_summary = await gpt.get_best_answer(messages_text[:4000])
            print(messages)
            print(messages_text)
            # –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
            example_channel = "@vcnews"
            summary = "üì∞ *–ü—Ä–∏–º–µ—Ä —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ @vcnews*\n\n"
            # summary += "1. –ü—Ä–∏–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ #1 - [–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ](https://t.me/vcnews/1)\n"
            # summary += "2. –ü—Ä–∏–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ #2 - [–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ](https://t.me/vcnews/2)\n"
            summary += gpt_summary
            await callback.message.edit_text(summary, reply_markup=get_inline_keyboard(
                ("–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞", "setup_bot")
            ))

    @dp.callback_query(F.data == "setup_bot")
    async def setup_bot(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞ –ø–æ–¥ —Ç–µ–±—è.\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
            "–í–∞–∂–Ω–æ: –∫–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º, –∏–Ω–∞—á–µ —è –Ω–µ —Å–º–æ–≥—É –Ω–∞ –Ω–µ–≥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.\n"
            "–î–∞–≤–∞–π, –ø–µ—Ä–µ—Å—ã–ª–∞–π, —è –∂–¥—É."
        )
        await state.set_state(UserStates.waiting_for_channel_start)

    @dp.message(UserStates.waiting_for_channel_start)
    async def add_channel_start(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if message.forward_from_chat and message.forward_from_chat.type == 'channel':
            channel = {
                'id': message.forward_from_chat.id,
                'username': message.forward_from_chat.username,
                'title': message.forward_from_chat.title
            }
        else:
            await message.answer(
                "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å, –∫–∞–Ω–∞–ª ‚Äì –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
            return

        if user_id in user_data:
            user_data[user_id]['channels'].append(channel)

        await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{channel['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤.")
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º–º–∞—Ä–∏?\n–ù–∞–ø–∏—à–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–º–º")

        await state.set_state(UserStates.waiting_for_time)

    @dp.message(UserStates.waiting_for_time)
    async def set_summary_time(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        time_str = message.text.strip()

        try:
            if ':' in time_str:
                hours, minutes = map(int, time_str.split(':'))
            else:
                hours = int(time_str)
                minutes = 0

            if not (0 <= hours < 24 and 0 <= minutes < 60):
                raise ValueError

            user_data[user_id]['settings']['summary_time'] = time(hours, minutes)

            await message.answer(
                f"–û–∫. –ê —Å–µ–π—á–∞—Å —É —Ç–µ–±—è –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?\n–¢–æ–∂–µ –ø—Ä–∏—à–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–º–º"
            )
            await state.set_state(UserStates.waiting_for_time_start)

        except (ValueError, AttributeError):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:30):")

    @dp.message(UserStates.waiting_for_time_start)
    async def set_user_time(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        time_str = message.text.strip()
        try:
            if ':' in time_str:
                hours, minutes = map(int, time_str.split(':'))
            else:
                hours = int(time_str)
                minutes = 0

            if not (0 <= hours < 24 and 0 <= minutes < 60):
                raise ValueError

            await message.answer(
                "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n"
                f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {user_data[user_id]['settings']['summary_time']}",
                reply_markup=get_inline_main_keyboard()
            )
            await state.clear()

        except (ValueError, AttributeError):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:30):")

    @dp.callback_query(F.data == "my_channels")
    async def show_user_channels(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        if user_id in user_data:
            if not user_data[user_id]['channels']:
                await callback.message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                                              reply_markup=get_inline_main_keyboard())
                return
        else:
            user_data[user_id] = {
                'level': 0,
                'channels': [],
                'email': '',
                'tags': [],
                'settings': {
                    'daily_summary': True,
                    'notifications': True,
                    'summary_time': time(9, 0)
                }
            }
            await callback.message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                                          reply_markup=get_inline_main_keyboard())
            return

        channels = user_data[user_id]['channels']
        response = "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n" + "\n".join(
            f"{i + 1}. {ch['title']} (@{ch['username']})"
            for i, ch in enumerate(channels[:3])
        )
        if len(channels) > 3:
            response += "\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 –∫–∞–Ω–∞–ª–∞. –£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π."
        await callback.message.answer(response, reply_markup=get_inline_main_keyboard())

    @dp.callback_query(F.data == "add_channels")
    async def add_channel_start_callback(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        if user_id in user_data:
            if len(user_data[user_id]['channels']) == 3 and user_data[user_id]['level'] < 1:
                await callback.message.answer(
                    "–í—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (3). –£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π, –ª–∏–±–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /pay, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π",
                    reply_markup=get_inline_main_keyboard()
                )
                return
            if len(user_data[user_id]['channels']) == 10 and user_data[user_id]['level'] < 2:
                await callback.message.answer(
                    "–í—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (10). –£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π, –ª–∏–±–æ –ø–æ–≤—ã—Å—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /pay, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤",
                    reply_markup=get_inline_main_keyboard()
                )
                return
            if len(user_data[user_id]['channels']) >= 50 and user_data[user_id]['level'] < 3:
                await callback.message.answer(
                    "–í—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (50). –£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π.",
                    reply_markup=get_inline_main_keyboard()
                )
                return
        else:
            user_data[user_id] = {
                'level': 0,
                'channels': [],
                'email': '',
                'tags': [],
                'settings': {
                    'daily_summary': True,
                    'notifications': True,
                    'summary_time': time(9, 0)
                }
            }
        await state.set_state(UserStates.waiting_for_channel)
        await callback.message.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel_name) –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.",
            reply_markup=get_inline_main_keyboard()
        )

    @dp.message(UserStates.waiting_for_channel)
    async def add_channel_finish(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        # –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.forward_from_chat and message.forward_from_chat.type == 'channel':
            channel = {
                'id': message.forward_from_chat.id,
                'username': message.forward_from_chat.username,
                'title': message.forward_from_chat.title
            }
        elif message.text and message.text.startswith('@'):
            channel = {
                'id': None,
                'username': message.text[1:].lower(),
                'title': message.text
            }
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            return

        if user_id in user_data:
            if any(c['username'] == channel['username'] for c in user_data[user_id]['channels']):
                await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.", reply_markup=get_inline_main_keyboard())
                await state.clear()
                return

        user_data[user_id]['channels'].append(channel)
        await state.clear()

        await message.answer(
            f"–ö–∞–Ω–∞–ª {channel['title']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞?",
            reply_markup=get_inline_main_keyboard()
        )

    def kbrd():
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏", callback_data="add_tags")
        builder.button(text="–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏", callback_data="delete_tags")
        builder.button(text="–ù–∞–∑–∞–¥", callback_data="back")

        builder.adjust(3)
        return builder.as_markup()

    @dp.callback_query(F.data == "delete_tags")
    async def delete_tags(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        initialize_user_data(user_id)

        if not user_data[user_id]['tags']:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–≥–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        for tag in user_data[user_id]['tags']:
            builder.button(text=tag, callback_data=f"remove_tag_{tag}")

        builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_tags")
        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–º—É —Ç–µ–≥—É –≤ —Å—Ç—Ä–æ–∫–µ

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(UserStates.waiting_for_tag_to_delete)

    @dp.callback_query(F.data.startswith("remove_tag_"), UserStates.waiting_for_tag_to_delete)
    async def process_tag_removal(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        tag_to_remove = callback.data.replace("remove_tag_", "")
        if not user_data[user_id]['tags']:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=get_inline_main_keyboard())
            return
        await state.set_state(UserStates.waiting_for_tag_to_delete)
        if tag_to_remove in user_data[user_id]['tags']:
            user_data[user_id]['tags'].remove(tag_to_remove)
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–≥–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            builder = InlineKeyboardBuilder()
            if user_data[user_id]['tags']:
                for tag in user_data[user_id]['tags']:
                    builder.button(text=tag, callback_data=f"remove_tag_{tag}")
                builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_tags")
                builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–º—É —Ç–µ–≥—É –≤ —Å—Ç—Ä–æ–∫–µ
                await callback.message.edit_text(
                    f"–¢–µ–≥ '{tag_to_remove}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                    reply_markup=builder.as_markup(
                ))
            else:
                await callback.message.edit_text(
                    f"–¢–µ–≥ '{tag_to_remove}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                    reply_markup=builder.as_markup(
                ))
        else:
            await callback.answer("–≠—Ç–æ—Ç —Ç–µ–≥ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω", show_alert=True)
        await state.clear()


    @dp.callback_query(F.data == "back_to_tags", UserStates.waiting_for_tag_to_delete)
    async def back_to_tags_menu(callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        await show_user_tags(callback)


    @dp.callback_query(F.data == "my_tags")
    async def show_user_tags(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        initialize_user_data(user_id)

        tags = user_data[user_id]['tags']
        if not tags:
            await callback.message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–≥–∞.\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
                                          reply_markup=kbrd())
        else:
            await callback.message.answer(f"–í–∞—à–∏ —Ç–µ–≥–∏ –¥–ª—è —Å–∞–º–º–∞—Ä–∏:\n\n#{' #'.join(tags)}\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?",
                                          reply_markup=kbrd())

    @dp.callback_query(F.data == "add_tags")
    async def add_tags(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥–∏ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ —á–µ—Ä–∑ –∑–∞–ø—è—Ç—É—é, –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ª–∏–±–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")
        await state.set_state(UserStates.waiting_for_tags)

    @dp.message(UserStates.waiting_for_tags)
    async def wait_for_tags(message: types.Message):
        user_id = message.from_user.id
        tags = user_data[user_id]['tags']
        user_data[user_id]['tags'].append(message.text)
        await message.answer(f"–í–∞—à–∏ —Ç–µ–≥–∏ –¥–ª—è —Å–∞–º–º–∞—Ä–∏:\n\n#{' #'.join(tags)}\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?",
                                          reply_markup=kbrd())

    @dp.callback_query(F.data == "back")
    async def get_back_to_tags(callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        await callback.message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–≥–æ–≤", reply_markup=get_inline_main_keyboard())

    @dp.callback_query(F.data == "get_summary")
    async def get_summary(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        initialize_user_data(user_id)

        if not user_data[user_id]['channels']:
            await callback.message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
            return

        await callback.message.answer("–°–æ–±–∏—Ä–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        summary = "üì∞ *–°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞*\n\n"

        for channel in user_data[user_id]['channels'][:3]:
            try:
                messages = await get_messages_from_channel(channel['id'], 2)
                if messages:
                    messages_text = "\n".join([msg.text or "" for msg in messages if hasattr(msg, 'text') and msg.text])
                    if messages_text:
                        gpt_summary = await gpt.get_best_answer(messages_text[:4000])
                        summary += f"*{channel['title']}* (@{channel['username']})\n{gpt_summary or '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É'}\n\n"
                    else:
                        summary += f"*{channel['title']}* (@{channel['username']})\n–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
                else:
                    summary += f"*{channel['title']}* (@{channel['username']})\n–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            except Exception as e:
                logging.error(f"Error processing channel {channel['title']}: {e}")
                summary += f"*{channel['title']}* (@{channel['username']})\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞\n\n"

        await callback.message.answer(summary, reply_markup=get_inline_main_keyboard())

    @dp.callback_query(F.data == "delete_channel")
    async def get_delete_channels(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        initialize_user_data(user_id)

        if not user_data[user_id]['channels']:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!")
            return

        builder = InlineKeyboardBuilder()
        for channel in user_data[user_id]['channels']:
            builder.button(text=channel['title'], callback_data=f"delete_{channel['id']}")
        builder.button(text="–ù–∞–∑–∞–¥", callback_data="cancel_delete")
        builder.adjust(1)

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=builder.as_markup())
        await state.set_state(UserStates.waiting_for_delete)

    @dp.callback_query(F.data.startswith("cancel_delete"), UserStates.waiting_for_delete)
    async def delete_channel_cancel(callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        await callback.message.answer("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=get_inline_main_keyboard())

    @dp.callback_query(F.data.startswith("delete_"), UserStates.waiting_for_delete)
    async def delete_channel_finish(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        channel_id = int(callback.data.split("_")[1])
        initialize_user_data(user_id)

        channel_to_delete = next((c for c in user_data[user_id]['channels'] if c['id'] == channel_id), None)
        if channel_to_delete is None:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            user_data[user_id]['channels'].remove(channel_to_delete)
            await callback.message.answer(f"–ö–∞–Ω–∞–ª {channel_to_delete['title']} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.",
                                          reply_markup=get_inline_main_keyboard())
        await state.clear()
        await callback.answer()

    @dp.callback_query(F.data == "set_time")
    async def set_summary_time_start(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        initialize_user_data(user_id)

        await state.set_state(UserStates.waiting_for_time)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:30):",
            reply_markup=types.ReplyKeyboardRemove())

    @dp.message(UserStates.waiting_for_time)
    async def set_summary_time_finish(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        try:
            user_time = parse_time_input(message.text.strip())
            user_data[user_id]['settings']['summary_time'] = user_time

            await message.answer(f"–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {user_time.strftime('%H:%M')}",
                                 reply_markup=get_inline_main_keyboard())
            await state.clear()
            await restart_scheduler_for_user(user_id)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:30):")

    @dp.message(UserStates.waiting_for_time_start)
    async def set_summary_time_finish_again(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        try:
            user_time = parse_time_input(message.text.strip())
            user_data[user_id]['settings']['summary_time'] = user_time

            await message.answer(f"–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {user_time.strftime('%H:%M')}",
                                 reply_markup=get_inline_main_keyboard())
            await state.clear()
            await restart_scheduler_for_user(user_id)
            await message.answer("–û–∫. –ê —Å–µ–π—á–∞—Å —É —Ç–µ–±—è –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å? –¢–æ–∂–µ –ø—Ä–∏—à–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–º–º")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:30):")

    @dp.message(UserStates.waiting_for_channel_start)
    async def add_channel_finish_start(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        initialize_user_data(user_id)

        if message.forward_from_chat and message.forward_from_chat.type == 'channel':
            channel = {
                'id': message.forward_from_chat.id,
                'username': message.forward_from_chat.username,
                'title': message.forward_from_chat.title
            }
        elif message.text and message.text.startswith('@'):
            channel = {
                'id': None,
                'username': message.text[1:].lower(),
                'title': message.text
            }
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel_name) –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            return

        if any(c['username'] == channel['username'] for c in user_data[user_id]['channels']):
            await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.", reply_markup=get_inline_main_keyboard())
        else:
            user_data[user_id]['channels'].append(channel)
            await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: \n{channel['title']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n")
            await message.answer("–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º–º–∞—Ä–∏?\n"
                                 "–ù–∞–ø–∏—à–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–º–º\n–ù–∞–ø—Ä–∏–º–µ—Ä, 10:30")
            await state.set_state(UserStates.waiting_for_time_start)

        await state.clear()
