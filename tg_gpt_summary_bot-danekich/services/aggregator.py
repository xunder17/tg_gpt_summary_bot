import logging
import asyncio
from datetime import datetime, timedelta, time
from pyrogram import Client
from pyrogram.errors import ChannelPrivate, UsernameNotOccupied

from config import api_id, api_hash
from data.storage import user_data
from services.gpt_service import gpt

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pyrogram-–∫–ª–∏–µ–Ω—Ç
app = Client("my_bot", api_id=api_id, api_hash=api_hash)


async def start_pyrogram():
    """–ó–∞–ø—É—Å–∫ Pyrogram-–∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω."""
    if not app.is_connected:
        await app.start()


async def get_messages_from_channel(channel_id: int, days: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ `days` –¥–Ω–µ–π.
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç.
    """
    cutoff_date = datetime.now() - timedelta(days=days)

    async def collect_messages():
        messages = []
        async for message in app.get_chat_history(channel_id):
            if message.date < cutoff_date:
                break
            media = bool(message.caption or message.video)
            messages.append({
                "id": message.id,
                "date": message.date,
                "text": message.text or message.caption or "",
                "has_media": media,
                "media_type": ('video' if message.video else 'photo') if media else ""
            })
        return messages

    try:
        return await collect_messages()

    except (ChannelPrivate, UsernameNotOccupied):
        try:
            await app.join_chat(channel_id)
            return await collect_messages()
        except Exception as join_error:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É {channel_id}: {join_error}")
            return None


async def restart_scheduler_for_user(user_id: int):
    """–õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)."""
    pass


async def send_daily_summary(user_id: int, bot):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤.
    """
    user_channels = user_data.get(user_id, {}).get("channels", [])
    if not user_channels:
        return

    summary = "üì∞ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π*\n\n"

    for channel in user_channels[:3]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî –ø–µ—Ä–≤—ã–µ 3 –∫–∞–Ω–∞–ª–∞
        try:
            messages = await get_messages_from_channel(channel["id"], days=2)
            if messages:
                text_blocks = [msg["text"] for msg in messages if msg["text"]]
                combined_text = "\n".join(text_blocks)[:4000]  # GPT –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ

                gpt_summary = await gpt.get_best_answer(combined_text) if combined_text else None
                summary += f"*{channel['title']}* (@{channel['username']})\n"
                summary += f"{gpt_summary or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}\n\n"
            else:
                summary += f"*{channel['title']}* (@{channel['username']})\n"
                summary += "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel['title']}: {e}")
            summary += f"*{channel['title']}* (@{channel['username']})\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"

    try:
        await bot.send_message(user_id, summary)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def scheduler(bot):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –≤—Ä–µ–º—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–≤–æ–¥–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º.
    """
    while True:
        now = datetime.now()
        for user_id, data in user_data.items():
            if not data.get('settings', {}).get('daily_summary', True):
                continue

            summary_time = data['settings'].get('summary_time', time(9, 0))
            if now.hour == summary_time.hour and now.minute == summary_time.minute:
                await send_daily_summary(user_id, bot)

        await asyncio.sleep(60)
